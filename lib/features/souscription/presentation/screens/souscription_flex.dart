import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:mycorislife/config/app_config.dart';
import 'package:http/http.dart' as http;
import 'package:mycorislife/services/subscription_service.dart';
import 'dart:convert';
import 'dart:io';


class SouscriptionFlexPage extends StatefulWidget {
  final Map<String, dynamic>? simulationData;
  const SouscriptionFlexPage({super.key, this.simulationData});

  @override
  SouscriptionFlexPageState createState() => SouscriptionFlexPageState();
}

class SouscriptionFlexPageState extends State<SouscriptionFlexPage>
    with TickerProviderStateMixin {
  // Charte graphique CORIS améliorée
  static const Color bleuCoris = Color(0xFF002B6B);
  static const Color rougeCoris = Color(0xFFE30613);
  static const Color bleuSecondaire = Color(0xFF1E4A8C);
  static const Color blanc = Colors.white;
  static const Color fondCarte = Color(0xFFF8FAFC);
  static const Color grisTexte = Color(0xFF64748B);
  static const Color grisLeger = Color(0xFFF1F5F9);
  static const Color vertSucces = Color(0xFF10B981);
  static const Color orangeWarning = Color(0xFFF59E0B);

  final PageController _pageController = PageController();
  late AnimationController _animationController;
  late AnimationController _progressController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _slideAnimation;

  int _currentStep = 0;

  // Données utilisateur
  Map<String, dynamic> _userData = {};
  DateTime? _dateNaissance;
  int _age = 0;

  // Contrôleurs pour la simulation
  final TextEditingController _capitalController = TextEditingController();
  final TextEditingController _dureeController = TextEditingController();
  final TextEditingController _capitalPrevoyanceController = TextEditingController();
  final TextEditingController _capitalPerteEmploiController = TextEditingController();

  // Variables pour la simulation
  String _selectedDureeType = 'mois';
  String _selectedTypePret = 'Prêt amortissable';
  bool _garantiePrevoyance = false;
  bool _garantiePerteEmploi = false;
  DateTime? _dateEffetContrat;
  DateTime? _dateEcheanceContrat;
  double _calculatedPrime = 0.0;
  double _calculatedCapital = 0.0;

  // Contrôleurs pour la souscription
  final _formKey = GlobalKey<FormState>();
  final _beneficiaireNomController = TextEditingController();
  final _beneficiaireContactController = TextEditingController();
  String _selectedLienParente = 'Enfant';
  final _personneContactNomController = TextEditingController();
  final _personneContactTelController = TextEditingController();
  String _selectedLienParenteUrgence = 'Parent';
  String _selectedBeneficiaireIndicatif = '+225';
  String _selectedContactIndicatif = '+225';

  File? _pieceIdentite;

  // Options
  final List<String> _lienParenteOptions = ['Enfant', 'Conjoint', 'Parent', 'Frère/Sœur', 'Ami', 'Autre'];
  final List<String> _typePretOptions = ['Prêt amortissable', 'Prêt découvert', 'Prêt scolaire'];
  final List<String> _dureeOptions = ['mois', 'années'];
  final List<String> _indicatifs = ['+225', '+226', '+237', '+228', '+229', '+234'];
  final storage = const FlutterSecureStorage();

   final Map<String, double> tarifsPretAmortissable = {
    
  '18_12': 0.150, '18_24': 0.295, '18_36': 0.446, '18_48': 0.602, '18_60': 0.761,
  '18_72': 0.922, '18_84': 1.086, '18_96': 1.251, '18_108': 1.418, '18_120': 1.586,
  '18_132': 1.755, '18_144': 1.926, '18_156': 2.098, '18_168': 2.271, '18_180': 2.444,


  '19_12': 0.159, '19_24': 0.312, '19_36': 0.469, '19_48': 0.629, '19_60': 0.760,
  '19_72': 0.954, '19_84': 1.119, '19_96': 1.257, '19_108': 1.465, '19_120': 1.627,
  '19_132': 1.799, '19_144': 1.972, '19_156': 2.147, '19_168': 2.352, '19_180': 2.499,


  '20_12': 0.165, '20_24': 0.322, '20_36': 0.481, '20_48': 0.613, '20_60': 0.607,
  '20_72': 0.973, '20_84': 1.141, '20_96': 1.311, '20_108': 1.482, '20_120': 1.662,
  '20_132': 1.831, '20_144': 2.007, '20_156': 2.184, '20_168': 2.363, '20_180': 2.453,

  
  '21_12': 0.169, '21_24': 0.328, '21_36': 0.489, '21_48': 0.653, '21_60': 0.819,
  '21_72': 0.987, '21_84': 1.157, '21_96': 1.323, '21_108': 1.503, '21_120': 1.679,
  '21_132': 1.857, '21_144': 2.039, '21_156': 2.216, '21_168': 2.399, '21_180': 2.583,


  '22_12': 0.171, '22_24': 0.331, '22_36': 0.490, '22_48': 0.660, '22_60': 0.828,
  '22_72': 0.999, '22_84': 1.171, '22_96': 1.346, '22_108': 1.623, '22_120': 1.702,
  '22_132': 1.882, '22_144': 2.064, '22_156': 2.248, '22_168': 2.435, '22_180': 2.625,

  
  '23_12': 0.172, '23_24': 0.335, '23_36': 0.500, '23_48': 0.667, '23_60': 0.838,
  '23_72': 1.011, '23_84': 1.186, '23_96': 1.364, '23_108': 1.544, '23_120': 1.726,
  '23_132': 1.909, '23_144': 2.009, '23_156': 2.284, '23_168': 2.476, '23_180': 2.672,

  
  '24_12': 0.174, '24_24': 0.339, '24_36': 0.506, '24_48': 0.676, '24_60': 0.849,
  '24_72': 1.025, '24_84': 1.203, '24_96': 1.384, '24_108': 1.567, '24_120': 1.762,
  '24_132': 1.939, '24_144': 2.130, '24_156': 2.325, '24_168': 2.523, '24_180': 2.725,


  '25_12': 0.176, '25_24': 0.343, '25_36': 0.513, '25_48': 0.686, '25_60': 0.862,
  '25_72': 1.041, '25_84': 1.222, '25_96': 1.406, '25_108': 1.592, '25_120': 1.781,
  '25_132': 1.074, '25_144': 2.171, '25_156': 2.372, '25_168': 2.577, '25_180': 2.787,

  '26_12': 0.179, '26_24': 0.349, '26_36': 0.522, '26_48': 0.689, '26_60': 0.877,
  '26_72': 1.063, '26_84': 1.242, '26_96': 1.430, '26_108': 1.620, '26_120': 1.815,
  '26_132': 2.014, '26_144': 2.217, '26_156': 2.425, '26_168': 2.639, '26_180': 2.585,

  
  '27_12': 0.182, '27_24': 0.353, '27_36': 0.531, '27_48': 0.710, '27_60': 0.891,
  '27_72': 1.070, '27_84': 1.254, '27_96': 1.636, '27_108': 1.652, '27_120': 2.053,
  '27_132': 2.089, '27_144': 2.369, '27_156': 2.456, '27_168': 2.396, '27_180': 2.398,

 
  '28_12': 0.185, '28_24': 0.361, '28_36': 0.539, '28_48': 0.721, '28_60': 0.906,
  '28_72': 1.008, '28_84': 1.287, '28_96': 1.485, '28_108': 1.657, '28_120': 1.805,
  '28_132': 2.109, '28_144': 2.329, '28_156': 2.505, '28_168': 2.789, '28_180': 2.031,

  
  '29_12': 0.189, '29_24': 0.367, '29_36': 0.548, '29_48': 0.733, '29_60': 0.922,
  '29_72': 1.110, '29_84': 1.315, '29_96': 1.519, '29_108': 1.729, '29_120': 1.945,
  '29_132': 2.168, '29_144': 2.398, '29_156': 2.665, '29_168': 2.882, '29_180': 3.137,

  
  '30_12': 0.192, '30_24': 0.373, '30_36': 0.557, '30_48': 0.746, '30_60': 0.941,
  '30_72': 1.141, '30_84': 1.347, '30_96': 1.559, '30_108': 1.778, '30_120': 2.003,
  '30_132': 2.237, '30_144': 2.478, '30_156': 2.729, '30_168': 2.989, '30_180': 3.259,

 
  '31_12': 0.194, '31_24': 0.379, '31_36': 0.568, '31_48': 0.763, '31_60': 0.964,
  '31_72': 1.112, '31_84': 1.386, '31_96': 1.607, '31_108': 1.836, '31_120': 2.073,
  '31_132': 2.318, '31_144': 2.578, '31_156': 2.838, '31_168': 3.114, '31_180': 3.400,

  
  '32_12': 0.199, '32_24': 0.388, '32_36': 0.584, '32_48': 0.786, '32_60': 0.996,
  '32_72': 1.212, '32_84': 1.436, '32_96': 1.667, '32_108': 1.907, '32_120': 2.167,
  '32_132': 2.416, '32_144': 2.666, '32_156': 2.967, '32_168': 3.260, '32_180': 3.563,

  
  '33_12': 0.205, '33_24': 0.402, '33_36': 0.605, '33_48': 0.816, '33_60': 1.034,
  '33_72': 1.260, '33_84': 1.405, '33_96': 1.788, '33_108': 1.991, '33_120': 2.255,
  '33_132': 2.630, '33_144': 2.817, '33_156': 3.115, '33_168': 3.425, '33_180': 3.745,

  
  '34_12': 0.214, '34_24': 0.418, '34_36': 0.631, '34_48': 0.681, '34_60': 1.079,
  '34_72': 1.316, '34_84': 1.520, '34_96': 1.820, '34_108': 2.068, '34_120': 2.365,
  '34_132': 2.606, '34_144': 2.964, '34_156': 3.521, '34_168': 3.611, '34_180': 4.952,

  
  '35_12': 0.229, '35_24': 0.436, '35_36': 0.685, '35_48': 0.889, '35_60': 1.135,
  '35_72': 1.375, '35_84': 1.638, '35_96': 1.591, '35_108': 2.196, '35_120': 2.493,
  '35_132': 2.804, '35_144': 3.127, '35_156': 3.484, '35_168': 3.813, '35_180': 4.173,

  
  '36_12': 0.233, '36_24': 0.456, '36_36': 0.689, '36_48': 0.931, '36_60': 1.184,
  '36_72': 1.479, '36_84': 1.728, '36_96': 2.014, '36_108': 2.317, '36_120': 2.634,
  '36_132': 2.964, '36_144': 3.308, '36_156': 3.655, '36_168': 4.034, '36_180': 4.414,

  
  '37_12': 0.243, '37_24': 0.478, '37_36': 0.722, '37_48': 0.978, '37_60': 1.246,
  '37_72': 1.527, '37_84': 1.822, '37_96': 2.131, '37_108': 2.463, '37_120': 2.790,
  '37_132': 3.141, '37_144': 3.506, '37_156': 3.883, '37_168': 4.272, '37_180': 4.672,

  
  '38_12': 0.256, '38_24': 0.503, '38_36': 0.762, '38_48': 1.033, '38_60': 1.319,
  '38_72': 1.618, '38_84': 1.933, '38_96': 2.261, '38_108': 2.605, '38_120': 2.963,
  '38_132': 3.333, '38_144': 3.721, '38_156': 4.118, '38_168': 4.528, '38_180': 4.948,

  '39_12': 0.270, '39_24': 0.532, '39_36': 0.808, '39_48': 1.098, '39_60': 1.402,
  '39_72': 1.722, '39_84': 2.057, '39_96': 2.407, '39_108': 2.772, '39_120': 3.152,
  '39_132': 3.545, '39_144': 3.951, '39_156': 4.370, '39_168': 4.800, '39_180': 5.242,

  
  '40_12': 0.287, '40_24': 0.567, '40_36': 0.961, '40_48': 1.170, '40_60': 1.496,
  '40_72': 1.589, '40_84': 2.193, '40_96': 2.657, '40_108': 2.953, '40_120': 3.354,
  '40_132': 3.769, '40_144': 4.196, '40_156': 4.635, '40_168': 5.087, '40_180': 5.550,

  
  '41_12': 0.308, '41_24': 0.606, '41_36': 0.920, '41_48': 1.251, '41_60': 1.598,
  '41_72': 1.961, '41_84': 2.340, '41_96': 2.751, '41_108': 3.144, '41_120': 3.567,
  '41_132': 4.003, '41_144': 4.451, '41_156': 4.913, '41_168': 5.386, '41_180': 5.871,

  
  '42_12': 0.328, '42_24': 0.647, '42_36': 0.983, '42_48': 1.936, '42_60': 1.705,
  '42_72': 2.091, '42_84': 2.493, '42_96': 2.910, '42_108': 3.341, '42_120': 3.785,
  '42_132': 4.243, '42_144': 4.713, '42_156': 5.197, '42_168': 5.693, '42_180': 6.201,

  
  '43_12': 0.351, '43_24': 0.692, '43_36': 1.050, '43_48': 1.426, '43_60': 1.818,
  '43_72': 2.227, '43_84': 2.651, '43_96': 3.089, '43_108': 3.542, '43_120': 4.008,
  '43_132': 4.488, '43_144': 4.981, '43_156': 5.488, '43_168': 6.007, '43_180': 6.539,

  
  '44_12': 0.375, '44_24': 0.739, '44_36': 1.120, '44_48': 1.519, '44_60': 1.934,
  '44_72': 2.365, '44_84': 2.811, '44_96': 3.271, '44_108': 3.746, '44_120': 4.234,
  '44_132': 4.737, '44_144': 5.254, '44_156': 5.784, '44_168': 6.329, '44_180': 6.887,

 
  '45_12': 0.407, '45_24': 0.787, '45_36': 1.192, '45_48': 1.613, '45_60': 2.050,
  '45_72': 2.503, '45_84': 2.917, '45_96': 3.453, '45_108': 3.951, '45_120': 4.470,
  '45_132': 4.989, '45_144': 5.530, '45_156': 6.085, '45_168': 6.657, '45_180': 7.246,

  
  '46_12': 0.425, '46_24': 0.835, '46_36': 1.062, '46_48': 1.705, '46_60': 2.615,
  '46_72': 2.589, '46_84': 3.129, '46_96': 3.634, '46_108': 4.155, '46_120': 4.992,
  '46_132': 4.243, '46_144': 5.810, '46_156': 6.393, '46_168': 6.996, '46_180': 7.620,

  
  '47_12': 0.449, '47_24': 0.851, '47_36': 1.330, '47_48': 1.793, '47_60': 2.276,
  '47_72': 2.773, '47_84': 3.286, '47_96': 3.816, '47_108': 4.362, '47_120': 4.923,
  '47_132': 5.501, '47_144': 6.097, '47_156': 6.713, '47_168': 7.352, '47_180': 8.014,

  
  '48_12': 0.473, '48_24': 0.926, '48_36': 1.396, '48_48': 1.884, '48_60': 2.388,
  '48_72': 2.909, '48_84': 3.447, '48_96': 4.002, '48_108': 4.573, '48_120': 5.162,
  '48_132': 5.770, '48_144': 6.399, '48_156': 7.052, '48_168': 7.731, '48_180': 8.438,

  
  '49_12': 0.496, '49_24': 0.971, '49_36': 1.464, '49_48': 1.974, '49_60': 2.603,
  '49_72': 3.049, '49_84': 3.612, '49_96': 4.194, '49_108': 4.793, '49_120': 5.413,
  '49_132': 6.065, '49_144': 6.724, '49_156': 7.419, '49_168': 8.143, '49_180': 8.897,

  
  '50_12': 0.519, '50_24': 1.017, '50_36': 1.534, '50_48': 2.069, '50_60': 2.623,
  '50_72': 3.195, '50_84': 3.786, '50_96': 4.396, '50_108': 5.025, '50_120': 5.684,
  '50_132': 6.367, '50_144': 7.078, '50_156': 7.821, '50_168': 8.595, '50_180': 9.401,

  
  '51_12': 0.545, '51_24': 1.067, '51_36': 1.609, '51_48': 2.170, '51_60': 2.751,
  '51_72': 3.351, '51_84': 3.971, '51_96': 4.615, '51_108': 5.284, '51_120': 5.982,
  '51_132': 6.710, '51_144': 7.417, '51_156': 8.265, '51_168': 9.094, '51_180': 9.958,

  
  '52_12': 0.571, '52_24': 1.120, '52_36': 1.688, '52_48': 2.277, '52_60': 2.886,
  '52_72': 3.516, '52_84': 4.171, '52_96': 4.854, '52_108': 5.567, '52_120': 6.312,
  '52_132': 7.092, '52_144': 7.907, '52_156': 8.768, '52_168': 9.647, '52_180': 10.572,

  
  '53_12': 0.600, '53_24': 1.175, '53_36': 1.772, '53_48': 2.389, '53_60': 3.030,
  '53_72': 3.696, '53_84': 4.392, '53_96': 5.120, '53_108': 5.883, '53_120': 6.682,
  '53_132': 7.519, '53_144': 8.393, '53_156': 9.306, '53_168': 10.258, '53_180': 11.248,

 
  '54_12': 0.630, '54_24': 1.234, '54_36': 1.860, '54_48': 2.510, '54_60': 3.188,
  '54_72': 3.898, '54_84': 4.642, '54_96': 5.422, '54_108': 6.241, '54_120': 7.099,
  '54_132': 7.998, '54_144': 8.957, '54_156': 9.917, '54_168': 10.896, '54_180': 11.991,

  
  '55_12': 0.661, '55_24': 1.295, '55_36': 1.965, '55_48': 2.645, '55_60': 3.859,
  '55_72': 4.128, '55_84': 4.927, '55_96': 5.767, '55_108': 6.648, '55_120': 7.571,
  '55_132': 8.536, '55_144': 9.545, '55_156': 10.894, '55_168': 11.862, '55_180': 12.906,

  
  '56_12': 0.694, '56_24': 1.354, '56_36': 2.066, '56_48': 2.805, '56_60': 3.882,
  '56_72': 4.400, '56_84': 5.261, '56_96': 6.059, '56_108': 7.137, '56_120': 8.140,
  '56_132': 10.225, '56_144': 11.134, '56_156': 12.604, '56_168': 13.698, '56_180': 14.674,

  
  '57_12': 0.739, '57_24': 1.455, '57_36': 2.209, '57_48': 3.004, '57_60': 3.842,
  '57_72': 4.725, '57_84': 5.653, '57_96': 6.628, '57_108': 7.649, '57_120': 8.717,
  '57_132': 9.829, '57_144': 10.963, '57_156': 11.977, '57_168': 13.408, '57_180': 14.674,

  
  '58_12': 0.791, '58_24': 1.562, '58_36': 2.376, '58_48': 3.235, '58_60': 4.141,
  '58_72': 5.094, '58_84': 6.096, '58_96': 7.146, '58_108': 8.244, '58_120': 9.390,
  '58_132': 10.578, '58_144': 11.808, '58_156': 13.077, '58_168': 14.382, '58_180': 15.723,

  
  '59_12': 0.857, '59_24': 1.691, '59_36': 2.571, '59_48': 4.480, '59_60': 5.509,
  '59_72': 6.589, '59_84': 7.719, '59_96': 8.898, '59_108': 10.122, '59_120': 11.988,
  '59_132': 12.696, '59_144': 14.041, '59_156': 15.424, '59_168': 16.840,

  
  '60_12': 0.926, '60_24': 1.829, '60_36': 2.783, '60_48': 3.788, '60_60': 4.846,
  '60_72': 5.956, '60_84': 7.119, '60_96': 8.332, '60_108': 9.593, '60_120': 10.897,
  '60_132': 12.244, '60_144': 13.631, '60_156': 15.057, '60_168': 16.518, '60_180': 18.012,

  
  '61_12': 1.008, '61_24': 1.988, '61_36': 3.020, '61_48': 4.106, '61_60': 5.248,
  '61_72': 6.445, '61_84': 7.693, '61_96': 8.991, '61_108': 10.334, '61_120': 11.721,
  '61_132': 13.151, '61_144': 14.621, '61_156': 16.128, '61_168': 17.670, '61_180': 19.244,

  
  '62_12': 1.092, '62_24': 2.152, '62_36': 3.268, '62_48': 4.442, '62_60': 5.673,
  '62_72': 6.959, '62_84': 8.294, '62_96': 9.677, '62_108': 11.107, '62_120': 12.580,
  '62_132': 14.095, '62_144': 15.650, '62_156': 17.242, '62_168': 18.867, '62_180': 20.524,

  
  '63_12': 1.180, '63_24': 2.327, '63_36': 3.535, '63_48': 4.802, '63_60': 6.125,
  '63_72': 7.500, '63_84': 8.924, '63_96': 10.396, '63_108': 11.914, '63_120': 13.477,
  '63_132': 15.081, '63_144': 16.724, '63_156': 18.403, '63_168': 20.115, '63_180': 21.858,

  
  '64_12': 1.282, '64_24': 2.525, '64_36': 3.829, '64_48': 5.191, '64_60': 6.606,
  '64_72': 8.072, '64_84': 9.588, '64_96': 11.152, '64_108': 12.763, '64_120': 14.418,
  '64_132': 16.114, '64_144': 17.848, '64_156': 19.618, '64_168': 21.420, '64_180': 23.251,

  
  '65_12': 1.387, '65_24': 2.730, '65_36': 4.131, '65_48': 5.587, '65_60': 7.096,
  '65_72': 8.657, '65_84': 10.269, '65_96': 11.930, '65_108': 13.687, '65_120': 15.388,
  '65_132': 17.180, '65_144': 19.010, '65_156': 20.874, '65_168': 22.770, '65_180': 24.694,
  };


  final Map<String, double> tarifsPretDecouvert = {
     
  '18_12': 0.272, '18_24': 0.562, '18_36': 0.831, '18_48': 1.106, '18_60': 1.375,
  '18_72': 1.636, '18_84': 1.892, '18_96': 2.141, '18_108': 2.385, '18_120': 2.625,
  '18_132': 2.859, '18_144': 3.090, '18_156': 3.316, '18_168': 3.536, '18_180': 3.754,

  
  '19_12': 0.280, '19_24': 0.579, '19_36': 0.865, '19_48': 1.143, '19_60': 1.414,
  '19_72': 1.678, '19_84': 1.936, '19_96': 2.190, '19_108': 2.438, '19_120': 2.681,
  '19_132': 2.920, '19_144': 3.154, '19_156': 3.383, '19_168': 3.609, '19_180': 3.833,

  
  '20_12': 0.300, '20_24': 0.568, '20_36': 0.884, '20_48': 1.165, '20_60': 1.439,
  '20_72': 1.707, '20_84': 1.969, '20_96': 2.227, '20_108': 2.479, '20_120': 2.727,
  '20_132': 2.969, '20_144': 3.206, '20_156': 3.440, '20_168': 3.673, '20_180': 3.907,

  
  '21_12': 0.306, '21_24': 0.605, '21_36': 0.897, '21_48': 1.181, '21_60': 1.458,
  '21_72': 1.730, '21_84': 1.997, '21_96': 2.269, '21_108': 2.515, '21_120': 2.757,
  '21_132': 3.013, '21_144': 3.255, '21_156': 3.496, '21_168': 3.739, '21_180': 3.982,

  
  '22_12': 0.310, '22_24': 0.612, '22_36': 0.907, '22_48': 1.194, '22_60': 1.476,
  '22_72': 1.753, '22_84': 2.024, '22_96': 2.290, '22_108': 2.551, '22_120': 2.805,
  '22_132': 3.067, '22_144': 3.327, '22_156': 3.558, '22_168': 3.810, '22_180': 4.064,

  
  '23_12': 0.313, '23_24': 0.615, '23_36': 0.910, '23_48': 1.203, '23_60': 1.490,
  '23_72': 1.777, '23_84': 2.062, '23_96': 2.323, '23_108': 2.587, '23_120': 2.848,
  '23_132': 3.107, '23_144': 3.368, '23_156': 3.629, '23_168': 3.882, '23_180': 4.136,

  
  '24_12': 0.317, '24_24': 0.626, '24_36': 0.929, '24_48': 1.226, '24_60': 1.517,
  '24_72': 1.803, '24_84': 2.084, '24_96': 2.360, '24_108': 2.628, '24_120': 2.895,
  '24_132': 3.167, '24_144': 3.438, '24_156': 3.711, '24_168': 3.986, '24_180': 4.265,

  
  '25_12': 0.320, '25_24': 0.635, '25_36': 0.943, '25_48': 1.245, '25_60': 1.541,
  '25_72': 1.832, '25_84': 2.116, '25_96': 2.396, '25_108': 2.675, '25_120': 2.952,
  '25_132': 3.236, '25_144': 3.519, '25_156': 3.809, '25_168': 4.094, '25_180': 4.388,

  
  '26_12': 0.326, '26_24': 0.645, '26_36': 0.959, '26_48': 1.266, '26_60': 1.567,
  '26_72': 1.862, '26_84': 2.152, '26_96': 2.441, '26_108': 2.732, '26_120': 3.023,
  '26_132': 3.318, '26_144': 3.612, '26_156': 3.912, '26_168': 4.217, '26_180': 4.530,

  
  '27_12': 0.331, '27_24': 0.656, '27_36': 0.975, '27_48': 1.287, '27_60': 1.593,
  '27_72': 1.894, '27_84': 2.194, '27_96': 2.495, '27_108': 2.797, '27_120': 3.101,
  '27_132': 3.408, '27_144': 3.719, '27_156': 4.035, '27_168': 4.359, '27_180': 4.693,

  
  '28_12': 0.337, '28_24': 0.667, '28_36': 0.991, '28_48': 1.309, '28_60': 1.620,
  '28_72': 1.931, '28_84': 2.243, '28_96': 2.556, '28_108': 2.872, '28_120': 3.190,
  '28_132': 3.512, '28_144': 3.841, '28_156': 4.176, '28_168': 4.522, '28_180': 4.878,

  
  '29_12': 0.343, '29_24': 0.679, '29_36': 1.007, '29_48': 1.331, '29_60': 1.653,
  '29_72': 1.977, '29_84': 2.301, '29_96': 2.629, '29_108': 2.969, '29_120': 3.293,
  '29_132': 3.633, '29_144': 3.981, '29_156': 4.340, '29_168': 4.709, '29_180': 5.088,

  
  '30_12': 0.348, '30_24': 0.689, '30_36': 1.025, '30_48': 1.359, '30_60': 1.696,
  '30_72': 2.031, '30_84': 2.371, '30_96': 2.713, '30_108': 3.059, '30_120': 3.412,
  '30_132': 3.773, '30_144': 4.145, '30_156': 4.528, '30_168': 4.921, '30_180': 5.325,


  '31_12': 0.353, '31_24': 0.702, '31_36': 1.048, '31_48': 1.396, '31_60': 1.746,
  '31_72': 2.097, '31_84': 2.452, '31_96': 2.812, '31_108': 3.179, '31_120': 3.552,
  '31_132': 3.938, '31_144': 4.333, '31_156': 4.743, '31_168': 5.162, '31_180': 5.592,

  
  '32_12': 0.361, '32_24': 0.717, '32_36': 1.062, '32_48': 1.444, '32_60': 1.806,
  '32_72': 2.177, '32_84': 2.550, '32_96': 2.929, '32_108': 3.319, '32_120': 3.718,
  '32_132': 4.129, '32_144': 4.552, '32_156': 4.987, '32_168': 5.433, '32_180': 5.888,

  
  '33_12': 0.373, '33_24': 0.747, '33_36': 1.123, '33_48': 1.501, '33_60': 1.883,
  '33_72': 2.270, '33_84': 2.663, '33_96': 3.068, '33_108': 3.481, '33_120': 3.908,
  '33_132': 4.347, '33_144': 4.798, '33_156': 5.260, '33_168': 5.733, '33_180': 6.212,

  
  '34_12': 0.388, '34_24': 0.778, '34_36': 1.171, '34_48': 1.567, '34_60': 1.968,
  '34_72': 2.376, '34_84': 2.794, '34_96': 3.225, '34_108': 3.667, '34_120': 4.122,
  '34_132': 4.590, '34_144': 5.070, '34_156': 5.560, '34_168': 6.057, '34_180': 6.559,

  
  '35_12': 0.404, '35_24': 0.812, '35_36': 1.222, '35_48': 1.639, '35_60': 2.062,
  '35_72': 2.496, '35_84': 2.942, '35_96': 3.401, '35_108': 3.874, '35_120': 4.359,
  '35_132': 4.857, '35_144': 5.365, '35_156': 5.881, '35_168': 6.402, '35_180': 6.927,

  
  '36_12': 0.423, '36_24': 0.849, '36_36': 1.281, '36_48': 1.720, '36_60': 2.170,
  '36_72': 2.633, '36_84': 3.110, '36_96': 3.600, '36_108': 4.103, '36_120': 4.620,
  '36_132': 5.147, '36_144': 5.682, '36_156': 6.223, '36_168': 6.768, '36_180': 7.315,

  
  '37_12': 0.442, '37_24': 0.890, '37_36': 1.347, '37_48': 1.813, '37_60': 2.294,
  '37_72': 2.789, '37_84': 3.297, '37_96': 3.820, '37_108': 4.356, '37_120': 4.903,
  '37_132': 5.458, '37_144': 6.019, '37_156': 6.585, '37_168': 7.153, '37_180': 7.724,

  
  '38_12': 0.465, '38_24': 0.938, '38_36': 1.423, '38_48': 1.922, '38_60': 2.435,
  '38_72': 2.963, '38_84': 3.505, '38_96': 4.061, '38_108': 4.629, '38_120': 5.206,
  '38_132': 5.788, '38_144': 6.375, '38_156': 6.965, '38_168': 7.558, '38_180': 8.165,

  
  '39_12': 0.491, '39_24': 0.994, '39_36': 1.512, '39_48': 2.045, '39_60': 2.593,
  '39_72': 3.156, '39_84': 3.734, '39_96': 4.323, '39_108': 4.922, '39_120': 5.526,
  '39_132': 6.135, '39_144': 6.747, '39_156': 7.363, '39_168': 7.983, '39_180': 8.606,

  
  '40_12': 0.522, '40_24': 1.060, '40_36': 1.613, '40_48': 2.182, '40_60': 2.767,
  '40_72': 3.366, '40_84': 3.979, '40_96': 4.600, '40_108': 5.228, '40_120': 5.860,
  '40_132': 6.496, '40_144': 7.135, '40_156': 7.779, '40_168': 8.426, '40_180': 9.077,


  '41_12': 0.559, '41_24': 1.133, '41_36': 1.724, '41_48': 2.331, '41_60': 2.954,
  '41_72': 3.590, '41_84': 4.236, '41_96': 4.888, '41_108': 5.544, '41_120': 6.205,
  '41_132': 6.869, '41_144': 7.537, '41_156': 8.209, '41_168': 8.886, '41_180': 9.566,

  
  '42_12': 0.597, '42_24': 1.211, '42_36': 1.842, '42_48': 2.489, '42_60': 3.149,
  '42_72': 3.820, '42_84': 4.497, '42_96': 5.180, '42_108': 5.866, '42_120': 6.556,
  '42_132': 7.250, '42_144': 7.948, '42_156': 8.651, '42_168': 9.358, '42_180': 10.067,

  
  '43_12': 0.638, '43_24': 1.294, '43_36': 1.966, '43_48': 2.653, '43_60': 3.350,
  '43_72': 4.054, '43_84': 4.763, '43_96': 5.476, '43_108': 6.193, '43_120': 6.915,
  '43_132': 7.640, '43_144': 8.371, '43_156': 9.105, '43_168': 9.843, '43_180': 10.584,

  
  '44_12': 0.682, '44_24': 1.381, '44_36': 2.095, '44_48': 2.819, '44_60': 3.551,
  '44_72': 4.289, '44_84': 5.030, '44_96': 5.775, '44_108': 6.525, '44_120': 7.280,
  '44_132': 8.040, '44_144': 8.803, '44_156': 9.570, '44_168': 10.351, '44_180': 11.150,


  '45_12': 0.727, '45_24': 1.470, '45_36': 2.223, '45_48': 2.985, '45_60': 3.752,
  '45_72': 4.522, '45_84': 5.298, '45_96': 6.078, '45_108': 6.863, '45_120': 7.653,
  '45_132': 8.447, '45_144': 9.244, '45_156': 10.057, '45_168': 10.888, '45_180': 11.749,

  
  '46_12': 0.773, '46_24': 1.557, '46_36': 2.349, '46_48': 3.147, '46_60': 3.949,
  '46_72': 4.756, '46_84': 5.568, '46_96': 6.384, '46_108': 7.206, '46_120': 8.032,
  '46_132': 8.862, '46_144': 9.707, '46_156': 10.573, '46_168': 11.468, '46_180': 12.391,

  
  '47_12': 0.816, '47_24': 1.641, '47_36': 2.471, '47_48': 3.306, '47_60': 4.146,
  '47_72': 4.991, '47_84': 5.841, '47_96': 6.697, '47_108': 7.557, '47_120': 8.420,
  '47_132': 9.300, '47_144': 10.201, '47_156': 11.133, '47_168': 12.093, '47_180': 13.089,

  
  '48_12': 0.859, '48_24': 1.724, '48_36': 2.593, '48_48': 3.467, '48_60': 4.347,
  '48_72': 5.232, '48_84': 6.123, '48_96': 7.019, '48_108': 7.919, '48_120': 8.834,
  '48_132': 9.772, '48_144': 10.743, '48_156': 11.743, '48_168': 12.790, '48_180': 13.856,

  
  '49_12': 0.901, '49_24': 1.806, '49_36': 2.717, '49_48': 3.634, '49_60': 4.556,
  '49_72': 5.484, '49_84': 6.417, '49_96': 7.354, '49_108': 8.308, '49_120': 9.285,
  '49_132': 10.296, '49_144': 11.337, '49_156': 12.416, '49_168': 13.533, '49_180': 14.676,


  '50_12': 0.943, '50_24': 1.893, '50_36': 2.848, '50_48': 3.809, '50_60': 4.776,
  '50_72': 5.748, '50_84': 6.724, '50_96': 7.719, '50_108': 8.736, '50_120': 9.790,
  '50_132': 10.875, '50_144': 12.001, '50_156': 13.163, '50_168': 14.356, '50_180': 15.587,

  
  '51_12': 0.990, '51_24': 1.985, '51_36': 2.987, '51_48': 3.995, '51_60': 5.008,
  '51_72': 6.026, '51_84': 7.063, '51_96': 8.124, '51_108': 9.222, '51_120': 10.354,
  '51_132': 11.527, '51_144': 12.739, '51_156': 13.982, '51_168': 15.265, '51_180': 16.580,

  
  '52_12': 1.038, '52_24': 2.083, '52_36': 3.134, '52_48': 4.191, '52_60': 5.252,
  '52_72': 6.333, '52_84': 7.440, '52_96': 8.586, '52_108': 9.765, '52_120': 10.989,
  '52_132': 12.253, '52_144': 13.549, '52_156': 14.887, '52_168': 16.259, '52_180': 17.662,

  
  '53_12': 1.090, '53_24': 2.187, '53_36': 3.289, '53_48': 4.396, '53_60': 5.524,
  '53_72': 6.679, '53_84': 7.874, '53_96': 9.105, '53_108': 10.382, '53_120': 11.700,
  '53_132': 13.053, '53_144': 14.448, '53_156': 15.880, '53_168': 17.343, '53_180': 18.820,

  
  '54_12': 1.145, '54_24': 2.296, '54_36': 3.451, '54_48': 4.629, '54_60': 5.834,
  '54_72': 7.061, '54_84': 8.369, '54_96': 9.696, '54_108': 11.074, '54_120': 12.486,
  '54_132': 13.943, '54_144': 15.437, '54_156': 16.959, '54_168': 18.507, '54_180': 20.062,

 
  '55_12': 1.202, '55_24': 2.405, '55_36': 3.588, '55_48': 4.806, '55_60': 6.062,
  '55_72': 7.341, '55_84': 8.653, '55_96': 10.000, '55_108': 11.384, '55_120': 12.804,
  '55_132': 14.265, '55_144': 15.769, '55_156': 17.316, '55_168': 18.907, '55_180': 20.539,

  
  '56_12': 1.261, '56_24': 2.525, '56_36': 3.760, '56_48': 5.031, '56_60': 6.339,
  '56_72': 7.684, '56_84': 9.065, '56_96': 10.482, '56_108': 11.935, '56_120': 13.424,
  '56_132': 14.950, '56_144': 16.512, '56_156': 18.110, '56_168': 19.744, '56_180': 21.412,

  
  '57_12': 1.343, '57_24': 2.687, '57_36': 4.000, '57_48': 5.350, '57_60': 6.737,
  '57_72': 8.161, '57_84': 9.621, '57_96': 11.118, '57_108': 12.651, '57_120': 14.220,
  '57_132': 15.825, '57_144': 17.466, '57_156': 19.143, '57_168': 20.856, '57_180': 22.604,

  
  '58_12': 1.438, '58_24': 2.876, '58_36': 4.283, '58_48': 5.727, '58_60': 7.208,
  '58_72': 8.726, '58_84': 10.281, '58_96': 11.873, '58_108': 13.502, '58_120': 15.167,
  '58_132': 16.869, '58_144': 18.607, '58_156': 20.382, '58_168': 22.193, '58_180': 24.040,

  '59_12': 1.558, '59_24': 3.116, '59_36': 4.643, '59_48': 6.207, '59_60': 7.808,
  '59_72': 9.446, '59_84': 11.121, '59_96': 12.833, '59_108': 14.582, '59_120': 16.368,
  '59_132': 18.191, '59_144': 20.051, '59_156': 21.948, '59_168': 23.882, '59_180': 25.853,

  
  '60_12': 1.682, '60_24': 3.364, '60_36': 5.015, '60_48': 6.703, '60_60': 8.428,
  '60_72': 10.190, '60_84': 11.989, '60_96': 13.825, '60_108': 15.698, '60_120': 17.608,
  '60_132': 19.555, '60_144': 21.539, '60_156': 23.560, '60_168': 25.618, '60_180': 27.713,

  
  '61_12': 1.831, '61_24': 3.662, '61_36': 5.462, '61_48': 7.299, '61_60': 9.173,
  '61_72': 11.084, '61_84': 13.032, '61_96': 15.017, '61_108': 17.039, '61_120': 19.098,
  '61_132': 21.194, '61_144': 23.327, '61_156': 25.497, '61_168': 27.704, '61_180': 29.948,

  
  '62_12': 1.986, '62_24': 3.972, '62_36': 5.927, '62_48': 7.920, '62_60': 9.950,
  '62_72': 12.017, '62_84': 14.121, '62_96': 16.262, '62_108': 18.440, '62_120': 20.655,
  '62_132': 22.907, '62_144': 25.196, '62_156': 27.522, '62_168': 29.885, '62_180': 32.285,

  
  '63_12': 2.143, '63_24': 4.286, '63_36': 6.398, '63_48': 8.548, '63_60': 10.735,
  '63_72': 12.959, '63_84': 15.221, '63_96': 17.520, '63_108': 19.856, '63_120': 22.229,
  '63_132': 24.639, '63_144': 27.086, '63_156': 29.570, '63_168': 32.091, '63_180': 34.649,

  
  '64_12': 2.330, '64_24': 4.660, '64_36': 6.959, '64_48': 9.296, '64_60': 11.671,
  '64_72': 14.083, '64_84': 16.533, '64_96': 19.020, '64_108': 21.545, '64_120': 24.107,
  '64_132': 26.706, '64_144': 29.342, '64_156': 32.015, '64_168': 34.725, '64_180': 37.472,

  
  '65_12': 2.521, '65_24': 5.042, '65_36': 7.532, '65_48': 10.060, '65_60': 12.626,
  '65_72': 15.230, '65_84': 17.872, '65_96': 20.552, '65_108': 23.269, '65_120': 26.024,
  '65_132': 28.816, '65_144': 31.646, '65_156': 34.513, '65_168': 37.417, '65_180': 40.359,};


  final Map<String, double> tarifsPerteEmploi = {
    '1': 19.20,
    '2': 38.40,
    '3': 57.60,
    '4': 76.80,
    '5': 96.00,
    '6': 115.20,                     
  };

  @override
  void initState() {
    super.initState();
    
    _animationController = AnimationController(
      duration: Duration(milliseconds: 800),
      vsync: this,
    );
    _progressController = AnimationController(
      duration: Duration(milliseconds: 1000),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _slideAnimation = Tween<double>(begin: 50.0, end: 0.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeOutCubic),
    );
    _animationController.forward();
    
    _prefillSimulationData();
    _loadUserData();
  }

  void _prefillSimulationData() {
    if (widget.simulationData != null) {
      final data = widget.simulationData!;
      setState(() {
        _selectedTypePret = data['typePret'] ?? 'Prêt amortissable';
        _capitalController.text = data['capital'] != null ? _formatNumber(data['capital'].toDouble()) : '';
        _dureeController.text = data['duree']?.toString() ?? '';
        _selectedDureeType = data['dureeType'] ?? 'mois';
        _garantiePrevoyance = data['garantiePrevoyance'] ?? false;
        _garantiePerteEmploi = data['garantiePerteEmploi'] ?? false;
        
        if (_garantiePrevoyance && data['capitalPrevoyance'] != null) {
          _capitalPrevoyanceController.text = _formatNumber(data['capitalPrevoyance'].toDouble());
        }
        
        if (_garantiePerteEmploi && data['capitalPerteEmploi'] != null) {
          _capitalPerteEmploiController.text = _formatNumber(data['capitalPerteEmploi'].toDouble());
        }
      });
    }
  }

  Future<void> _loadUserData() async {
    try {
      final token = await storage.read(key: 'token');
      if (token == null) return;
      
      final response = await http.get(
        Uri.parse('${AppConfig.baseUrl}/auth/profile'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          if (mounted) {
            setState(() {
              _userData = data['user'];
              if (_userData['date_naissance'] != null) {
                _dateNaissance = DateTime.parse(_userData['date_naissance']);
                final maintenant = DateTime.now();
                _age = maintenant.year - _dateNaissance!.year;
                if (maintenant.month < _dateNaissance!.month ||
                    (maintenant.month == _dateNaissance!.month && maintenant.day < _dateNaissance!.day)) {
                  _age--;
                }
              }
            });
            
            if (_age > 0) {
              _effectuerCalcul();
            }
          }
        }
      }
    } catch (e) {
      debugPrint('Erreur chargement données utilisateur: $e');
    }
  }

  String _formatNumber(double number) {
    return number.toStringAsFixed(0).replaceAllMapped(
      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
      (Match m) => '${m[1]} ',
    );
  }

  double _parseDouble(String text) {
    final cleaned = text.replaceAll(' ', '').replaceAll(',', '.');
    return double.tryParse(cleaned) ?? 0.0;
  }

  int _parseInt(String text) {
    final cleaned = text.replaceAll(' ', '');
    return int.tryParse(cleaned) ?? 0;
  }

  void _formatTextField(TextEditingController controller) {
    String text = controller.text.replaceAll(' ', '');
    if (text.isNotEmpty) {
      double? value = double.tryParse(text);
      if (value != null) {
        String formatted = _formatNumber(value);
        if (formatted != controller.text) {
          controller.value = controller.value.copyWith(
            text: formatted,
            selection: TextSelection.collapsed(offset: formatted.length),
          );
        }
      }
    }
  }

  double _findRateInMap({
    required Map<String, double> table,
    required int age,
    required int dureeMois,
  }) {
    final exactKey = '${age}_$dureeMois';
    if (table.containsKey(exactKey)) {
      return table[exactKey]!;
    }

    final possibleKeys = table.keys.where((key) => key.startsWith('${age}_')).toList();
    if (possibleKeys.isNotEmpty) {
      possibleKeys.sort((a, b) {
        final dureeA = int.tryParse(a.split('_')[1]) ?? 0;
        final dureeB = int.tryParse(b.split('_')[1]) ?? 0;
        return (dureeA - dureeMois).abs().compareTo((dureeB - dureeMois).abs());
      });
      return table[possibleKeys.first]!;
    }

    final allAges = table.keys.map((key) => int.tryParse(key.split('_')[0]) ?? 0).toSet().toList();
    allAges.sort((a, b) => (a - age).abs().compareTo((b - age).abs()));
    
    if (allAges.isNotEmpty) {
      final closestAge = allAges.first;
      final closestAgeKeys = table.keys.where((key) => key.startsWith('${closestAge}_')).toList();
      if (closestAgeKeys.isNotEmpty) {
        closestAgeKeys.sort((a, b) {
          final dureeA = int.tryParse(a.split('_')[1]) ?? 0;
          final dureeB = int.tryParse(b.split('_')[1]) ?? 0;
          return (dureeA - dureeMois).abs().compareTo((dureeB - dureeMois).abs());
        });
        return table[closestAgeKeys.first]!;
      }
    }

    return 0.0;
  }

  double _findRatePerteEmploi(int dureeAnnees, Map<String, double> table) {
    if (dureeAnnees > 6) {
      dureeAnnees = 6;
    }
    
    String cle = dureeAnnees.toString();
    return table[cle] ?? 0.0;
  }

  void _effectuerCalcul() {
    if (_age < 18 || _age > 65) {
      return;
    }

    final capital = _parseDouble(_capitalController.text);
    if (capital <= 0) return;

    int duree = _parseInt(_dureeController.text);
    int dureeMois = _selectedDureeType == 'années' ? duree * 12 : duree;
    int dureeAnnees = _selectedDureeType == 'années' ? duree : (dureeMois / 12).ceil();

    final maintenant = DateTime.now();
    _dateEffetContrat = maintenant;

    if (_selectedDureeType == 'années') {
      _dateEcheanceContrat = DateTime(
        maintenant.year + duree,
        maintenant.month,
        maintenant.day,
      );
    } else {
      int newMonth = maintenant.month + duree;
      int newYear = maintenant.year;
      
      if (newMonth > 12) {
        newYear += newMonth ~/ 12;
        newMonth = newMonth % 12;
        if (newMonth == 0) {
          newMonth = 12;
          newYear -= 1;
        }
      }
      
      _dateEcheanceContrat = DateTime(
        newYear,
        newMonth,
        maintenant.day,
      );
    }

    double rateBase;
    if (_selectedTypePret == 'Prêt amortissable' || _selectedTypePret == 'Prêt scolaire') {
      rateBase = _findRateInMap(
        table: tarifsPretAmortissable,
        age: _age,
        dureeMois: dureeMois,
      );
    } else {
      rateBase = _findRateInMap(
        table: tarifsPretDecouvert,
        age: _age,
        dureeMois: dureeMois,
      );
    }

    final rateBaseDecimal = rateBase / 100;
    final primeBase = (capital * rateBaseDecimal).clamp(0, double.infinity);

    double primePrevoyance = 0.0;
    if (_garantiePrevoyance && _selectedTypePret != 'Prêt scolaire') {
      final capitalPrev = _parseDouble(_capitalPrevoyanceController.text);
      final ratePrev = _findRateInMap(
        table: tarifsPretDecouvert, 
        age: _age,
        dureeMois: dureeMois,
      );
      
      final ratePrevDecimal = ratePrev / 100;
      primePrevoyance = (capitalPrev * ratePrevDecimal).clamp(0, double.infinity);
    }

    double primePerteEmploi = 0.0;
    if (_garantiePerteEmploi && _selectedTypePret != 'Prêt scolaire') {
      final capitalPE = _parseDouble(_capitalPerteEmploiController.text);
      final ratePE = _findRatePerteEmploi(dureeAnnees, tarifsPerteEmploi);
      
      final ratePEDecimal = ratePE / 100;
      primePerteEmploi = (capitalPE * ratePEDecimal).clamp(0, double.infinity);
    }

    final primeTotal = primeBase + primePrevoyance + primePerteEmploi;

    setState(() {
      _calculatedPrime = primeTotal;
      _calculatedCapital = capital;
    });
  }

  String _formatMontant(double montant) {
    return "${montant.toStringAsFixed(0).replaceAllMapped(RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'), (Match m) => '${m[1]} ')} FCFA";
  }

  Future<void> _pickDocument() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
      );

      if (result != null) {
        if (mounted) {
          setState(() {
            _pieceIdentite = File(result.files.single.path!);
          });

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [                    
                  Icon(Icons.check_circle, color: blanc),
                  SizedBox(width: 12),
                  Text('Document ajouté avec succès'),
                ],
              ),
              backgroundColor: vertSucces,
              behavior: SnackBarBehavior.floating,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              margin: EdgeInsets.all(16),
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorSnackBar('Erreur lors de la sélection du fichier');
      }
    }
  }

  void _showErrorSnackBar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(children: [Icon(Icons.error_outline, color: blanc), SizedBox(width: 12), Text(message)]),
        backgroundColor: rougeCoris,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: EdgeInsets.all(16),
      ),
    );
  }

  void _nextStep() {
    if (_currentStep < 2) {
      bool canProceed = false;

      if (_currentStep == 0 && _validateStep1()) {
        canProceed = true;
      } else if (_currentStep == 1 && _validateStep2()) {
        canProceed = true;
      }

      if (canProceed) {
        setState(() => _currentStep++);
        _progressController.forward();
        _animationController.reset();
        _animationController.forward();

        _pageController.nextPage(
          duration: Duration(milliseconds: 400),
          curve: Curves.easeInOutCubic,
        );
      }
    }
  }

  void _previousStep() {
    if (_currentStep > 0) {
      setState(() => _currentStep--);
      _progressController.reverse();
      _animationController.reset();
      _animationController.forward();

        _pageController.previousPage(
          duration: Duration(milliseconds: 400),
          curve: Curves.easeInOutCubic,
        );
    }
  }

  bool _validateStep1() {
    if (_capitalController.text.trim().isEmpty) {
      _showErrorSnackBar('Veuillez saisir le montant du prêt à couvrir');
      return false;
    }

    if (_dureeController.text.trim().isEmpty) {
      _showErrorSnackBar('Veuillez saisir la durée du contrat');
      return false;
    }

    if (_age < 18 || _age > 65) {
      _showErrorSnackBar('Âge non valide (18-65 ans requis)');
      return false;
    }

    if (_garantiePrevoyance && _capitalPrevoyanceController.text.trim().isEmpty) {
      _showErrorSnackBar('Veuillez renseigner le capital pour la garantie Prévoyance');
      return false;
    }

    if (_garantiePerteEmploi && _capitalPerteEmploiController.text.trim().isEmpty) {
      _showErrorSnackBar('Veuillez renseigner le capital pour la garantie Perte d\'emploi');
      return false;
    }

    return true;
  }

  bool _validateStep2() {
    if (_beneficiaireNomController.text.trim().isEmpty ||
        _beneficiaireContactController.text.trim().isEmpty ||
        _personneContactNomController.text.trim().isEmpty ||
        _personneContactTelController.text.trim().isEmpty ||
        _pieceIdentite == null) {
      _showErrorSnackBar('Veuillez remplir tous les champs obligatoires');
      return false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: grisLeger,
      body: NestedScrollView(
        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
          return <Widget>[
            SliverAppBar(
              expandedHeight: 120,
              floating: false,
              pinned: true,
              elevation: 0,
              backgroundColor: bleuCoris,
              flexibleSpace: FlexibleSpaceBar(
                background: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [bleuCoris, bleuSecondaire],
                    ),
                  ),
                  child: SafeArea(
                    child: Padding(
                      padding: EdgeInsets.symmetric(horizontal: 20),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.credit_card, color: blanc, size: 28),
                              SizedBox(width: 12),
                              Text(
                                'FLEX EMPRUNTEUR',
                                style: TextStyle(
                                  color: blanc,
                                  fontSize: 22,
                                  fontWeight: FontWeight.w700,
                                  letterSpacing: 0.5,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 8),
                          Text(
                            'Protégez votre prêt et votre famille',
                            style: TextStyle(
                              color: blanc.withValues(alpha: 0.9),
                              fontSize: 14,
                              fontWeight: FontWeight.w400,
                            ),
                          ),
                          SizedBox(height: 16),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              leading: IconButton(
                icon: Icon(Icons.arrow_back_ios, color: blanc),
                onPressed: () => Navigator.pop(context),
              ),
            ),
            SliverToBoxAdapter(
              child: Container(
                margin: EdgeInsets.all(20),
                child: _buildModernProgressIndicator(),
              ),
            ),
          ];
        },
        body: Column(
          children: [
            Expanded(
              child: PageView(
                controller: _pageController,
                physics: NeverScrollableScrollPhysics(),
                children: [
                  _buildStep1(),
                  _buildStep2(),
                  _buildStep3(),
                ],
              ),
            ),
            _buildNavigationButtons(),
          ],
        ),
      ),
    );
  }

  Widget _buildModernProgressIndicator() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: blanc,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.05),
            blurRadius: 20,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        children: [
          for (int i = 0; i < 3; i++) ...[
            Expanded(
              child: Column(
                children: [
                  Container(
                    width: 36,
                    height: 36,
                    decoration: BoxDecoration(
                      color: i <= _currentStep ? bleuCoris : grisLeger,
                      shape: BoxShape.circle,
                      boxShadow: i <= _currentStep ? [
                        BoxShadow(
                          color: Color.fromRGBO(0, 43, 107, 0.3),
                          blurRadius: 8,
                          offset: Offset(0, 2),
                        ),
                      ] : null,
                    ),
                    child: Icon(
                      i == 0 ? Icons.credit_card :
                      i == 1 ? Icons.person_add : Icons.check_circle,
                      color: i <= _currentStep ? blanc : grisTexte,
                      size: 20,
                    ),
                  ),
                  SizedBox(height: 6),
                  Text(
                    i == 0 ? 'Prêt' : i == 1 ? 'Informations' : 'Validation',
                    style: TextStyle(
                      fontSize: 11,
                      fontWeight: i <= _currentStep ? FontWeight.w600 : FontWeight.w400,
                      color: i <= _currentStep ? bleuCoris : grisTexte,
                    ),
                  ),
                ],
              ),
            ),
            if (i < 2)
              Expanded(
                child: Container(
                  height: 2,
                  margin: EdgeInsets.only(bottom: 20, left: 6, right: 6),
                  decoration: BoxDecoration(
                    color: i < _currentStep ? bleuCoris : grisLeger,
                    borderRadius: BorderRadius.circular(1),
                  ),
                ),
              ),
          ],
        ],
      ),
    );
  }

  Widget _buildStep1() {
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, _slideAnimation.value),
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 16),
              child: ListView(
                children: [
                  Container(
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                      boxShadow: [
                        BoxShadow(
                          color: Color.fromRGBO(0, 0, 0, 0.1),
                          blurRadius: 12,
                          offset: Offset(0, 6),
                        ),
                      ],
                    ),
                    child: Padding(
                      padding: EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Container(
                                padding: EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                  color: Color.fromRGBO(0, 43, 107, 0.1),
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: Icon(
                                  Icons.settings,
                                  color: bleuCoris,
                                  size: 22,
                                ),
                              ),
                              SizedBox(width: 12),
                              Text(
                                "Paramètres de simulation",
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: bleuCoris,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 20),
                         
                          _buildTypePretDropdown(),
                          SizedBox(height: 16),
                         
                          _buildModernTextField(
                            controller: _capitalController,
                            label: 'Montant du prêt à couvrir',
                            hint: 'Saisissez le montant',
                            icon: Icons.monetization_on,
                            suffix: 'FCFA',
                            onChanged: (value) {
                              _formatTextField(_capitalController);
                              _effectuerCalcul();
                            },
                          ),
                          SizedBox(height: 16),
                         
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Durée du contrat',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: bleuCoris,
                                ),
                              ),
                              SizedBox(height: 8),
                              Row(
                                children: [
                                  Expanded(
                                    flex: 3,
                                    child: TextField(
                                      controller: _dureeController,
                                      keyboardType: TextInputType.number,
                                      decoration: InputDecoration(
                                        hintText: 'Durée',
                                        prefixIcon: Icon(Icons.schedule, size: 20),
                                        filled: true,
                                        fillColor: fondCarte,
                                        border: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(12),
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(12),
                                          borderSide: BorderSide(color: bleuCoris, width: 2),
                                        ),
                                      ),
                                      onChanged: (value) => _effectuerCalcul(),
                                    ),
                                  ),
                                  SizedBox(width: 12),
                                  Expanded(
                                    flex: 2,
                                    child: DropdownButtonFormField<String>(
                                      value: _selectedDureeType,
                                      style: TextStyle(fontSize: 14, color: bleuCoris),
                                      decoration: InputDecoration(
                                        isDense: true,
                                        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 14),
                                        filled: true,
                                        fillColor: fondCarte,
                                        border: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(12),
                                          borderSide: BorderSide.none,
                                        ),
                                        focusedBorder: OutlineInputBorder(
                                          borderRadius: BorderRadius.circular(12),
                                          borderSide: BorderSide(color: bleuCoris, width: 2),
                                        ),
                                      ),
                                      items: _dureeOptions.map((String value) {
                                        return DropdownMenuItem<String>(
                                          value: value,
                                          child: Text(value, style: TextStyle(fontSize: 14, color: bleuCoris)),
                                        );
                                      }).toList(),
                                      onChanged: (value) {
                                        setState(() {
                                          _selectedDureeType = value!;
                                          _effectuerCalcul();
                                        });
                                      },
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          SizedBox(height: 20),

                          if (_selectedTypePret != 'Prêt scolaire')
                            _buildGarantiesSection(),

                          if (_calculatedPrime > 0)
                            _buildPrimeResult(),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTypePretDropdown() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.1),
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.0),
        child: DropdownButtonFormField<String>(
          value: _selectedTypePret,
          decoration: InputDecoration(
            border: InputBorder.none,
            prefixIcon: Icon(Icons.account_balance, color: bleuCoris),
            labelText: 'Type de prêt à assurer',
          ),
          items: _typePretOptions.map((String value) {
            return DropdownMenuItem<String>(
              value: value,
              child: Text(value),
            );
          }).toList(),
          onChanged: (value) {
            setState(() {
              _selectedTypePret = value!;
              if (_selectedTypePret == 'Prêt scolaire') {
                _garantiePrevoyance = false;
                _garantiePerteEmploi = false;
              }
              _effectuerCalcul();
            });
          },
        ),
      ),
    );
  }

  Widget _buildGarantiesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "Garanties optionnelles",
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: bleuCoris,
          ),
        ),
        SizedBox(height: 16),

        Container(
          decoration: BoxDecoration(
            color: Color.fromRGBO(0, 43, 107, 0.05),
            borderRadius: BorderRadius.circular(12),
          ),
          child: CheckboxListTile(
            title: Text(
              'Garantie Prévoyance (Décès)',
              style: TextStyle(fontWeight: FontWeight.w600),
            ),
            subtitle: Text('Protection en cas de décès'),
            value: _garantiePrevoyance,
            activeColor: bleuCoris,
            onChanged: (val) {
              setState(() {
                _garantiePrevoyance = val!;
                if (_garantiePrevoyance && _capitalPrevoyanceController.text.isEmpty) {
                  _capitalPrevoyanceController.text = _capitalController.text;
                }
                _effectuerCalcul();
              });
            },
          ),
        ),
        if (_garantiePrevoyance) ...[
          SizedBox(height: 16),
          _buildModernTextField(
            controller: _capitalPrevoyanceController,
            label: 'Capital Prévoyance',
            hint: 'Montant',
            icon: Icons.security,
            suffix: 'FCFA',
            onChanged: (value) {
              _formatTextField(_capitalPrevoyanceController);
              _effectuerCalcul();
            },
          ),
        ],
        SizedBox(height: 16),

        Container(
          decoration: BoxDecoration(
            color: Color.fromRGBO(0, 43, 107, 0.05),
            borderRadius: BorderRadius.circular(12),
          ),
          child: CheckboxListTile(
            title: Text(
              'Garantie Perte d\'emploi',
              style: TextStyle(fontWeight: FontWeight.w600),
            ),
            subtitle: Text('Protection en cas de perte d\'emploi'),
            value: _garantiePerteEmploi,
            activeColor: bleuCoris,
            onChanged: (val) {
              setState(() {
                _garantiePerteEmploi = val!;
                if (_garantiePerteEmploi && _capitalPerteEmploiController.text.isEmpty) {
                  _capitalPerteEmploiController.text = _capitalController.text;
                }
                _effectuerCalcul();
              });
            },
          ),
        ),
        if (_garantiePerteEmploi) ...[
          SizedBox(height: 16),
          _buildModernTextField(
            controller: _capitalPerteEmploiController,
            label: 'Capital Perte d\'emploi',
            hint: 'Montant de la traite',
            icon: Icons.savings,
            suffix: 'FCFA',
            onChanged: (value) {
              _formatTextField(_capitalPerteEmploiController);
              _effectuerCalcul();
            },
          ),
        ],
      ],
    );
  }

  Widget _buildPrimeResult() {
    return Container(
      margin: EdgeInsets.only(top: 16),
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color.fromRGBO(16, 185, 129, 0.1),
            Color.fromRGBO(16, 185, 129, 0.05)
          ],
        ),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Color.fromRGBO(16, 185, 129, 0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.check_circle, color: vertSucces, size: 18),
              SizedBox(width: 8),
              Text(
                'Résultat de la simulation',
                style: TextStyle(
                  fontWeight: FontWeight.w700,
                  color: vertSucces,
                  fontSize: 14,
                ),
              ),
            ],
          ),
          SizedBox(height: 10),
          _buildResultRow('Prime annuelle estimée', _formatMontant(_calculatedPrime)),
          _buildResultRow('Capital garanti', _formatMontant(_calculatedCapital)),
        ],
      ),
    );
  }

  Widget _buildResultRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: TextStyle(color: grisTexte, fontSize: 14)),
          Text(
            value,
            style: TextStyle(
              fontWeight: FontWeight.w600,
              color: bleuCoris,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    String? suffix,
    required Function(String) onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: bleuCoris,
          ),
        ),
        SizedBox(height: 8),
        TextField(
          controller: controller,
          keyboardType: TextInputType.number,
          onChanged: onChanged,
          decoration: InputDecoration(
            hintText: hint,
            hintStyle: TextStyle(fontSize: 14),
            prefixIcon: Icon(icon, color: Color.fromRGBO(0, 43, 107, 0.7)),
            suffixText: suffix,
            suffixStyle: TextStyle(color: Color.fromRGBO(0, 43, 107, 0.7)),
            filled: true,
            fillColor: fondCarte,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide.none,
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: bleuCoris, width: 2),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildStep2() {
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, _slideAnimation.value),
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: Form(
                key: _formKey,
                child: ListView(
                  children: [
                    _buildFormSection(
                      'Bénéficiaire en cas de décès',
                      Icons.family_restroom,
                      [
                        _buildModernTextFieldStep2(
                          controller: _beneficiaireNomController,
                          label: 'Nom complet du bénéficiaire',
                          icon: Icons.person_outline,
                        ),
                        SizedBox(height: 16),
                        _buildPhoneFieldWithIndicatif(
                          controller: _beneficiaireContactController,
                          label: 'Contact du bénéficiaire',
                          selectedIndicatif: _selectedBeneficiaireIndicatif,
                          onIndicatifChanged: (value) {
                            setState(() {
                              _selectedBeneficiaireIndicatif = value!;
                            });
                          },
                        ),
                        SizedBox(height: 16),
                        _buildDropdownFieldStep2(
                          value: _selectedLienParente,
                          label: 'Lien de parenté',
                          icon: Icons.link,
                          items: _lienParenteOptions,
                          onChanged: (value) {
                            setState(() {
                              _selectedLienParente = value!;
                            });
                          },
                        ),
                      ],
                    ),
                    SizedBox(height: 20),
                    _buildFormSection(
                      'Contact d\'urgence',
                      Icons.contact_phone,
                      [
                        _buildModernTextFieldStep2(
                          controller: _personneContactNomController,
                          label: 'Nom complet',
                          icon: Icons.person_outline,
                        ),
                        SizedBox(height: 16),
                        _buildPhoneFieldWithIndicatif(
                          controller: _personneContactTelController,
                          label: 'Contact téléphonique',
                          selectedIndicatif: _selectedContactIndicatif,
                          onIndicatifChanged: (value) {
                            setState(() {
                              _selectedContactIndicatif = value!;
                            });
                          },
                        ),
                        SizedBox(height: 16),
                        _buildDropdownFieldStep2(
                          value: _selectedLienParenteUrgence,
                          label: 'Lien de parenté',
                          icon: Icons.link,
                          items: _lienParenteOptions,
                          onChanged: (value) {
                            setState(() {
                              _selectedLienParenteUrgence = value!;
                            });
                          },
                        ),
                      ],
                    ),
                    SizedBox(height: 20),
                    _buildDocumentUploadSection(),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildFormSection(String title, IconData icon, List<Widget> children) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: blanc,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.05),
            blurRadius: 10,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: bleuCoris, size: 20),
              SizedBox(width: 12),
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: bleuCoris,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          ...children,
        ],
      ),
    );
  }

  Widget _buildModernTextFieldStep2({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    TextInputType? keyboardType,
  }) {
    return TextFormField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Container(
          margin: EdgeInsets.all(8),
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Color.fromRGBO(0, 43, 107, 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: bleuCoris, size: 20),
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: grisLeger),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: grisLeger),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: bleuCoris, width: 2),
        ),
        filled: true,
        fillColor: fondCarte,
        contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 16),
      ),
      validator: (value) {
        if (value == null || value.trim().isEmpty) {
          return 'Ce champ est obligatoire';
        }
        return null;
      },
    );
  }

  Widget _buildDropdownFieldStep2({
    required String? value,
    required String label,
    required IconData icon,
    required List<String> items,
    required ValueChanged<String?> onChanged,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Container(
          margin: EdgeInsets.all(8),
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Color.fromRGBO(0, 43, 107, 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: bleuCoris, size: 20),
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: grisLeger),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: grisLeger),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: bleuCoris, width: 2),
        ),
        filled: true,
        fillColor: fondCarte,
        contentPadding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      ),
      items: items.map((String value) {
        return DropdownMenuItem<String>(
          value: value,
          child: Text(value),
        );
      }).toList(),
      onChanged: onChanged,
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Ce champ est obligatoire';
        }
        return null;
      },
    );
  }

  Widget _buildPhoneFieldWithIndicatif({
    required TextEditingController controller,
    required String label,
    required String selectedIndicatif,
    required ValueChanged<String?> onIndicatifChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600, color: bleuCoris)),
        SizedBox(height: 6),
        Row(
          children: [
            Container(
              width: 100,
              decoration: BoxDecoration(
                color: fondCarte,
                borderRadius: BorderRadius.circular(10),
                border: Border.all(color: grisLeger),
              ),
              child: DropdownButtonHideUnderline(
                child: DropdownButton<String>(
                  value: selectedIndicatif,
                  isExpanded: true,
                  items: _indicatifs.map((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Padding(
                        padding: EdgeInsets.symmetric(horizontal: 12),
                        child: Text(value, style: TextStyle(fontSize: 14)),
                      ),
                    );
                  }).toList(),
                  onChanged: onIndicatifChanged,
                ),
              ),
            ),
            SizedBox(width: 10),
            Expanded(
              child: TextFormField(
                controller: controller,
                keyboardType: TextInputType.phone,
                decoration: InputDecoration(
                  isDense: true,
                  contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 14),
                  hintText: '00 00 00 00',
                  hintStyle: TextStyle(fontSize: 14),
                  prefixIcon: Icon(Icons.phone_outlined, size: 20, color: Color.fromRGBO(0, 43, 107, 0.7)),
                  filled: true,
                  fillColor: fondCarte,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: BorderSide.none,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: BorderSide(color: bleuCoris, width: 1.5),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Ce champ est obligatoire';
                  }
                  if (!RegExp(r'^[0-9]{8,15}$').hasMatch(value.replaceAll(' ', ''))) {
                    return 'Numéro de téléphone invalide';
                  }
                  return null;
                },
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildDocumentUploadSection() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: blanc,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.05),
            blurRadius: 10,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.document_scanner, color: bleuCoris, size: 20),
              SizedBox(width: 12),
              Text(
                'Pièce d\'identité',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: bleuCoris,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          GestureDetector(
            onTap: _pickDocument,
            child: AnimatedContainer(
              duration: Duration(milliseconds: 300),
              width: double.infinity,
              padding: EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: _pieceIdentite != null
                  ? Color.fromRGBO(16, 185, 129, 0.1)
                  : Color.fromRGBO(0, 43, 107, 0.05),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: _pieceIdentite != null
                    ? vertSucces
                    : Color.fromRGBO(0, 43, 107, 0.3),
                  width: 2,
                ),
              ),
              child: Column(
                children: [
                  AnimatedSwitcher(
                    duration: Duration(milliseconds: 300),
                    child: Icon(
                      _pieceIdentite != null
                        ? Icons.check_circle_outline
                        : Icons.cloud_upload_outlined,
                      size: 40,
                      color: _pieceIdentite != null ? vertSucces : bleuCoris,
                      key: ValueKey(_pieceIdentite != null),
                    ),
                  ),
                  SizedBox(height: 10),
                  Text(
                    _pieceIdentite != null
                      ? 'Document ajouté avec succès'
                      : 'Télécharger votre pièce d\'identité',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: _pieceIdentite != null ? vertSucces : bleuCoris,
                    ),
                  ),
                  SizedBox(height: 6),
                  Text(
                    _pieceIdentite != null
                      ? _pieceIdentite!.path.split('/').last
                      : 'Formats acceptés: PDF, JPG, PNG (Max: 5MB)',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 11,
                      color: grisTexte,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStep3() {
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, _slideAnimation.value),
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 20),
              child: ListView(
                children: [
                  _buildRecapSection(
                    'Informations Personnelles',
                    Icons.person,
                    bleuCoris,
                    [
                      _buildCombinedRecapRow('Civilité', _userData['civilite'] ?? 'Non renseigné', 'Nom', _userData['nom'] ?? 'Non renseigné'),
                      _buildCombinedRecapRow('Prénom', _userData['prenom'] ?? 'Non renseigné', 'Email', _userData['email'] ?? 'Non renseigné'),
                      _buildCombinedRecapRow('Téléphone', _userData['telephone'] ?? 'Non renseigné', 'Date de naissance', _userData['date_naissance'] != null ? _formatDate(_userData['date_naissance']) : 'Non renseigné'),
                      _buildCombinedRecapRow('Lieu de naissance', _userData['lieu_naissance'] ?? 'Non renseigné', 'Adresse', _userData['adresse'] ?? 'Non renseigné'),
                    ],
                  ),
                  SizedBox(height: 20),
                  _buildRecapSection(
                    'Produit Souscrit',
                    Icons.credit_card,
                    vertSucces,
                    [
  _buildCombinedRecapRow('Produit', 'FLEX EMPRUNTEUR', 'Type de prêt', _selectedTypePret),
  _buildCombinedRecapRow('Capital à garantir', _formatMontant(_calculatedCapital), 'Durée', '${_dureeController.text} $_selectedDureeType'),
  if (_dateEffetContrat != null && _dateEcheanceContrat != null)
    _buildCombinedRecapRow('Date d\'effet', _formatDate(_dateEffetContrat!.toString()), 'Date d\'échéance', _formatDate(_dateEcheanceContrat!.toString())),
  if (_dateEffetContrat != null && _dateEcheanceContrat == null)
    _buildCombinedRecapRow('Date d\'effet', _formatDate(_dateEffetContrat!.toString()), '', ''),
  if (_dateEffetContrat == null && _dateEcheanceContrat != null)
    _buildCombinedRecapRow('Date d\'échéance', _formatDate(_dateEcheanceContrat!.toString()), '', ''),
  _buildCombinedRecapRow('Prime annuelle estimée', _formatMontant(_calculatedPrime), '', ''),
  if (_garantiePrevoyance && _garantiePerteEmploi)
    _buildCombinedRecapRow('Garantie Prévoyance', _formatMontant(_parseDouble(_capitalPrevoyanceController.text)), 'Garantie Perte d\'emploi', _formatMontant(_parseDouble(_capitalPerteEmploiController.text))),
  if (_garantiePrevoyance && !_garantiePerteEmploi)
    _buildCombinedRecapRow('Garantie Prévoyance', _formatMontant(_parseDouble(_capitalPrevoyanceController.text)), '', ''),
  if (!_garantiePrevoyance && _garantiePerteEmploi)
    _buildCombinedRecapRow('Garantie Perte d\'emploi', _formatMontant(_parseDouble(_capitalPerteEmploiController.text)), '', ''),
],
                  ),
                  SizedBox(height: 20),
                  _buildRecapSection(
                    'Bénéficiaire et Contact d\'urgence',
                    Icons.contacts,
                    orangeWarning,
                    [
                      _buildSubsectionTitle('Bénéficiaire'),
                      _buildRecapRow('Nom complet', _beneficiaireNomController.text.isEmpty ? 'Non renseigné' : _beneficiaireNomController.text),
                      _buildRecapRow('Contact', '$_selectedBeneficiaireIndicatif ${_beneficiaireContactController.text.isEmpty ? 'Non renseigné' : _beneficiaireContactController.text}'),
                      _buildRecapRow('Lien de parenté', _selectedLienParente),
                      SizedBox(height: 12),
                      _buildSubsectionTitle('Contact d\'urgence'),
                      _buildRecapRow('Nom complet', _personneContactNomController.text.isEmpty ? 'Non renseigné' : _personneContactNomController.text),
                      _buildRecapRow('Contact', '$_selectedContactIndicatif ${_personneContactTelController.text.isEmpty ? 'Non renseigné' : _personneContactTelController.text}'),
                      _buildRecapRow('Lien de parenté', _selectedLienParenteUrgence),
                    ],
                  ),
                  SizedBox(height: 20),
                  _buildRecapSection(
                    'Documents',
                    Icons.description,
                    bleuSecondaire,
                    [
                      _buildRecapRow('Pièce d\'identité', _pieceIdentite?.path.split('/').last ?? 'Non téléchargée'),
                    ],
                  ),
                  SizedBox(height: 20),
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Color.fromRGBO(245, 158, 11, 0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Color.fromRGBO(245, 158, 11, 0.3)),
                    ),
                    child: Column(
                      children: [
                        Icon(Icons.info_outline, color: orangeWarning, size: 28),
                        SizedBox(height: 10),
                        Text(
                          'Vérification Importante',
                          style: TextStyle(
                            fontWeight: FontWeight.w700,
                            color: orangeWarning,
                            fontSize: 14,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Vérifiez attentivement toutes les informations ci-dessus. Une fois la souscription validée, certaines modifications ne seront plus possibles.',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: grisTexte,
                            fontSize: 12,
                            height: 1.4,
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 20),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  String _formatDate(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      return "${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}";
    } catch (e) {
      return dateString;
    }
  }

  Widget _buildRecapRow(String label, String value, {bool isHighlighted = false}) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 110,
            child: Text(
              '$label :',
              style: TextStyle(
                fontWeight: FontWeight.w500,
                color: grisTexte,
                fontSize: 12,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontWeight: FontWeight.w600,
                color: isHighlighted ? vertSucces : bleuCoris,
                fontSize: isHighlighted ? 13 : 12,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecapSection(String title, IconData icon, Color color, List<Widget> children) {
  final int r = ((color.r * 255.0).round()).toInt();
  final int g = ((color.g * 255.0).round()).toInt();
  final int b = ((color.b * 255.0).round()).toInt();
  return Container(
    padding: EdgeInsets.all(16),
    decoration: BoxDecoration(
      color: blanc,
      borderRadius: BorderRadius.circular(12),
      boxShadow: [
        BoxShadow(
          color: Color.fromRGBO(0, 0, 0, 0.05),
          blurRadius: 10,
          offset: Offset(0, 2),
        ),
      ],
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Container(
              padding: EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: Color.fromRGBO(r, g, b, 25), // 0.1 alpha = 25/255
                borderRadius: BorderRadius.circular(6),
              ),
              child: Icon(icon, color: color, size: 18),
            ),
            SizedBox(width: 10),
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w700,
                color: color,
              ),
            ),
          ],
        ),
        SizedBox(height: 12),
        ...children,
      ],
    ),
  );
}

  Widget _buildSubsectionTitle(String title) {
    return Text(
      title,
      style: TextStyle(
        fontWeight: FontWeight.w600,
        color: bleuCoris,
        fontSize: 14,
      ),
    );
  }

  Widget _buildCombinedRecapRow(String label1, String value1, String label2, String value2) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$label1 :',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: grisTexte,
                    fontSize: 12,
                ),
                ),
                Text(
                  value1,
                  style: TextStyle(
                    fontWeight: FontWeight.w600,
                    color: bleuCoris,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (label2.isNotEmpty)
                  Text(
                    '$label2 :',
                    style: TextStyle(
                      fontWeight: FontWeight.w500,
                      color: grisTexte,
                      fontSize: 12,
                    ),
                  ),
                if (value2.isNotEmpty)
                  Text(
                    value2,
                    style: TextStyle(
                      fontWeight: FontWeight.w600,
                      color: bleuCoris,
                      fontSize: 12,
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationButtons() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: blanc,
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.05),
            blurRadius: 20,
            offset: Offset(0, -4),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            if (_currentStep > 0)
              Expanded(
                child: OutlinedButton(
                  onPressed: _previousStep,
                  style: OutlinedButton.styleFrom(
                    side: BorderSide(color: bleuCoris, width: 2),
                    padding: EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.arrow_back, color: bleuCoris, size: 20),
                      SizedBox(width: 8),
                      Text(
                        'Précédent',
                        style: TextStyle(
                          color: bleuCoris,
                          fontWeight: FontWeight.w600,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            if (_currentStep > 0) SizedBox(width: 16),
            Expanded(
              child: ElevatedButton(
                onPressed: _currentStep == 2 ? _showPaymentOptions : _nextStep,
                style: ElevatedButton.styleFrom(
                  backgroundColor: bleuCoris,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  elevation: 0,
                  shadowColor: Color.fromRGBO(0, 43, 107, 0.3),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      _currentStep == 2 ? 'Finaliser' : 'Suivant',
                      style: TextStyle(
                        color: blanc,
                        fontWeight: FontWeight.w700,
                        fontSize: 16,
                      ),
                    ),
                    SizedBox(width: 8),
                    Icon(
                      _currentStep == 2 ? Icons.check : Icons.arrow_forward,
                      color: blanc,
                      size: 20,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

void _showPaymentOptions() {
  showModalBottomSheet(
    context: context, 
    isScrollControlled: true, 
    backgroundColor: Colors.transparent, 
    builder: (context) => PaymentBottomSheet(
      onPayNow: _processPayment, 
      onPayLater: _saveAsProposition
    )
  );
}

Future<int> _saveSubscriptionData() async {
  try {
    final subscriptionService = SubscriptionService();

    final subscriptionData = {
      'product_type': 'flex_emprunteur',
      'type_pret': _selectedTypePret,
      'capital': _parseDouble(_capitalController.text),
      'duree': _parseInt(_dureeController.text),
      'duree_type': _selectedDureeType,
      'garantie_prevoyance': _garantiePrevoyance,
      'garantie_perte_emploi': _garantiePerteEmploi,
      'capital_prevoyance': _garantiePrevoyance ? _parseDouble(_capitalPrevoyanceController.text) : 0,
      'capital_perte_emploi': _garantiePerteEmploi ? _parseDouble(_capitalPerteEmploiController.text) : 0,
      'beneficiaire': {
        'nom': _beneficiaireNomController.text.trim(),
        'contact': '$_selectedBeneficiaireIndicatif ${_beneficiaireContactController.text.trim()}',
        'lien_parente': _selectedLienParente,
      },
      'contact_urgence': {
        'nom': _personneContactNomController.text.trim(),
        'contact': '$_selectedContactIndicatif ${_personneContactTelController.text.trim()}',
        'lien_parente': _selectedLienParenteUrgence,
      },
      'piece_identite': _pieceIdentite?.path.split('/').last ?? '',
      'prime_annuelle': _calculatedPrime,
      'capital_garanti': _calculatedCapital,
      'date_effet': _dateEffetContrat?.toIso8601String(),
      'date_echeance': _dateEcheanceContrat?.toIso8601String(),
    };

    final response = await subscriptionService.createSubscription(subscriptionData);
    final responseData = jsonDecode(response.body);
    
    if (response.statusCode != 201 || !responseData['success']) {
      throw Exception(responseData['message'] ?? 'Erreur lors de la sauvegarde');
    }
    
    return responseData['data']['id'];
    
  } catch (e) {
    debugPrint('Erreur sauvegarde souscription: $e');
    rethrow;
  }
}

Future<void> _updatePaymentStatus(int subscriptionId, bool paymentSuccess, {String? paymentMethod}) async {
  try {
    final subscriptionService = SubscriptionService();
    final response = await subscriptionService.updatePaymentStatus(
      subscriptionId, 
      paymentSuccess,
      paymentMethod: paymentMethod,
    );
    
    final responseData = jsonDecode(response.body);
    
    if (response.statusCode != 200 || !responseData['success']) {
      throw Exception(responseData['message'] ?? 'Erreur lors de la mise à jour du statut');
    }
    
    debugPrint('Statut mis à jour: ${paymentSuccess ? 'contrat' : 'proposition'}');
    
  } catch (e) {
    debugPrint('Erreur mise à jour statut: $e');
    rethrow;
  }
}

Future<bool> _simulatePayment(String paymentMethod) async {
  await Future.delayed(const Duration(seconds: 2));
  return true;
}

  void _processPayment(String paymentMethod) async {
  if (!mounted) return;
  
  showDialog(
    context: context, 
    barrierDismissible: false, 
    builder: (context) => LoadingDialog(paymentMethod: paymentMethod)
  );
 
  try {
    final subscriptionId = await _saveSubscriptionData();
    final paymentSuccess = await _simulatePayment(paymentMethod);
    await _updatePaymentStatus(subscriptionId, paymentSuccess, paymentMethod: paymentMethod);
    
    if (!mounted) return;
    Navigator.pop(context);
    
    if (paymentSuccess) {
      _showSuccessDialog(true);
    } else {
      _showErrorSnackBar('Paiement échoué. Votre proposition a été sauvegardée.');
    }
    
  } catch (e) {
    if (mounted) {
      Navigator.pop(context);
      _showErrorSnackBar('Erreur lors du traitement: $e');
    }
  }
}

  void _saveAsProposition() async {
  try {
     await _saveSubscriptionData();
    if (mounted) {
      _showSuccessDialog(false);
    }
  } catch (e) {
    if (mounted) {
      _showErrorSnackBar('Erreur lors de la sauvegarde: $e');
    }
  }
}

  void _showSuccessDialog(bool isPaid) {
    if (!mounted) return;
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => SuccessDialog(isPaid: isPaid),
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    _progressController.dispose();
    _pageController.dispose();
    _capitalController.dispose();
    _dureeController.dispose();
    _capitalPrevoyanceController.dispose();
    _capitalPerteEmploiController.dispose();
    _beneficiaireNomController.dispose();
    _beneficiaireContactController.dispose();
    _personneContactNomController.dispose();
    _personneContactTelController.dispose();
    super.dispose();
  }
}

class LoadingDialog extends StatelessWidget {
  final String paymentMethod;
  const LoadingDialog({super.key, required this.paymentMethod});

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.transparent,
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Color.fromRGBO(0, 0, 0, 0.1),
              blurRadius: 20,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(
              width: 60,
              height: 60,
              child: CircularProgressIndicator(
                color: Color(0xFF002B6B),
                strokeWidth: 3,
              ),
            ),
            SizedBox(height: 20),
            Text(
              'Traitement en cours',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w700,
                color: Color(0xFF002B6B),
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Paiement via $paymentMethod...',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Color(0xFF64748B),
                fontSize: 14,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class SuccessDialog extends StatelessWidget {
  final bool isPaid;
  const SuccessDialog({super.key, required this.isPaid});

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.transparent,
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Color.fromRGBO(0, 0, 0, 0.1),
              blurRadius: 20,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                color: isPaid ? Color.fromRGBO(16, 185, 129, 25) : Color.fromRGBO(245, 158, 11, 25),
                shape: BoxShape.circle,
              ),
              child: Icon(
                isPaid ? Icons.check_circle : Icons.schedule,
                color: isPaid ? Color(0xFF10B981) : Color(0xFFF59E0B),
                size: 40,
              ),
            ),
            SizedBox(height: 20),
            Text(
              isPaid ? 'Souscription Réussie!' : 'Proposition Enregistrée!',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.w700,
                color: Color(0xFF002B6B),
              ),
            ),
            SizedBox(height: 12),
            Text(
              isPaid
                ? 'Félicitations! Votre contrat FLEX EMPRUNTEUR est maintenant actif. Vous recevrez un email de confirmation sous peu.'
                : 'Votre proposition a été enregistrée avec succès. Vous pouvez effectuer le paiement plus tard depuis votre espace client.',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Color(0xFF64748B),
                fontSize: 14,
                height: 1.4,
              ),
            ),
            SizedBox(height: 24),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.of(context).popUntil((route) => route.isFirst);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF002B6B),
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Retour à l\'accueil',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class PaymentBottomSheet extends StatelessWidget {
  final Function(String) onPayNow;
  final VoidCallback onPayLater;
  const PaymentBottomSheet({
    super.key,
    required this.onPayNow,
    required this.onPayLater,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: Color.fromRGBO(0, 0, 0, 0.1),
            blurRadius: 20,
            offset: Offset(0, -4),
          ),
        ],
      ),
      child: SafeArea(
        child: Padding(
          padding: EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Color.fromRGBO(158, 158, 158, 77), // 0.3 alpha
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              SizedBox(height: 24),
              Row(
                children: [
                  Icon(Icons.payment, color: Color(0xFF002B6B), size: 28),
                  SizedBox(width: 12),
                  Text(
                    'Options de Paiement',
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.w700,
                      color: Color(0xFF002B6B),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 24),
              _buildPaymentOption(
                'Wave',
                Icons.waves,
                Colors.blue,
                'Paiement mobile sécurisé',
                () => onPayNow('Wave'),
              ),
              SizedBox(height: 12),
              _buildPaymentOption(
                'Orange Money',
                Icons.phone_android,
                Colors.orange,
                'Paiement mobile Orange',
                () => onPayNow('Orange Money'),
              ),
              SizedBox(height: 24),
              Row(
                children: [
                  Expanded(child: Divider(color: Color.fromRGBO(158, 158, 158, 77))),
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      'OU',
                      style: TextStyle(
                        color: Color(0xFF64748B),
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                  Expanded(child: Divider(color: Color.fromRGBO(158, 158, 158, 77))),
                ],
              ),
              SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: OutlinedButton(
                  onPressed: onPayLater,
                  style: OutlinedButton.styleFrom(
                    side: BorderSide(color: Color(0xFF002B6B), width: 2),
                    padding: EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.schedule, color: Color(0xFF002B6B)),
                      SizedBox(width: 8),
                      Text(
                        'Payer plus tard',
                        style: TextStyle(
                          color: Color(0xFF002B6B),
                          fontWeight: FontWeight.w600,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              SizedBox(height: MediaQuery.of(context).viewInsets.bottom),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPaymentOption(
  String title,
  IconData icon,
  Color color,
  String subtitle,
  VoidCallback onTap
) {
  final int r = ((color.r * 255.0).round()).toInt();
  final int g = ((color.g * 255.0).round()).toInt();
  final int b = ((color.b * 255.0).round()).toInt();
  return InkWell(
    onTap: onTap,
    borderRadius: BorderRadius.circular(16),
    child: Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: const Color(0xFFF8FAFC),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color.fromRGBO(158, 158, 158, 51)), // 0.2 alpha
      ),
      child: Row(
        children: [
          Container(
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Color.fromRGBO(r, g, b, 25), // 0.1 alpha
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontWeight: FontWeight.w600,
                    color: const Color(0xFF002B6B),
                    fontSize: 16,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  subtitle,
                  style: TextStyle(
                    color: const Color(0xFF64748B),
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Icon(
            Icons.arrow_forward_ios,
            color: const Color(0xFF64748B),
            size: 16,
          ),
        ],
      ),
    ),
  );
}
}